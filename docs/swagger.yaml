basePath: /api/v1
definitions:
  controllers.CreateBlogRequest:
    properties:
      content:
        type: string
      title:
        type: string
      user_id:
        type: string
    required:
    - content
    - title
    - user_id
    type: object
  controllers.CreateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  controllers.GetBlogResponse:
    properties:
      claps:
        type: integer
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/controllers.User'
      user_id:
        type: string
    type: object
  controllers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.User:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
    type: object
  models.Blog:
    properties:
      bookmarked_by:
        items:
          $ref: '#/definitions/models.User'
        type: array
      claps:
        type: integer
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: string
    type: object
  models.Comment:
    properties:
      blog:
        $ref: '#/definitions/models.Blog'
      blog_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: string
    type: object
  models.User:
    properties:
      blogs:
        items:
          $ref: '#/definitions/models.Blog'
        type: array
      bookmarks:
        items:
          $ref: '#/definitions/models.Blog'
        type: array
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      password:
        description: Exclude from JSON response
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: API Support
    url: http://www.swagger.io/support
  description: This is a simple blog API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Blogs API
  version: "1.0"
paths:
  /blog:
    post:
      consumes:
      - application/json
      description: Create a new blog
      parameters:
      - description: Blog object
        in: body
        name: blog
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateBlogRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
      summary: Create a new blog
      tags:
      - Blogs
  /blog/{blogId}:
    get:
      description: Get a blog by ID
      operationId: get-blog-by-id
      parameters:
      - description: Blog ID
        in: path
        name: blogId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetBlogResponse'
      security:
      - BearerAuth: []
      summary: Get a blog by ID
      tags:
      - Blogs
  /login:
    post:
      consumes:
      - application/json
      description: Login a user
      operationId: login-user
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Login a user
      tags:
      - Users
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user
      operationId: create-user
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
      summary: Create a new user
      tags:
      - Users
  /user/{id}:
    get:
      description: Get a user by ID
      operationId: get-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get a user by ID
      tags:
      - Users
schemes:
- http
- https
swagger: "2.0"
